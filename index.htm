<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Выбор Дат</title>
    <style>
        :root {
            --tg-bg: var(--tg-theme-bg-color, #ffffff);
            --tg-text: var(--tg-theme-text-color, #222222);
            --tg-hint: var(--tg-theme-hint-color, #999999);
            --tg-button: var(--tg-theme-button-color, #2481cc);
            --tg-button-text: var(--tg-theme-button-text-color, #ffffff);
            --tg-secondary-bg: var(--tg-theme-secondary-bg-color, #f1f1f1);
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--tg-bg);
            color: var(--tg-text);
            margin: 0;
            padding: 15px;
            display: flex;
            flex-direction: column;
            height: 100vh;
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            overflow: hidden;
        }
        .calendar-wrapper {
            width: 100%;
            max-width: 380px;
            margin: 0 auto;
            background-color: var(--tg-bg);
            border-radius: 12px;
            padding: 10px;
            box-sizing: border-box;
        }
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 5px;
        }
        .calendar-header button {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--tg-text);
        }
        .calendar-month-year {
            font-weight: 600;
            font-size: 18px;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .calendar-day, .calendar-weekday {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 40px;
            width: 100%;
            font-size: 14px;
            border-radius: 50%;
        }
        .calendar-weekday {
            color: var(--tg-hint);
            font-size: 12px;
        }
        .calendar-day {
            cursor: pointer;
            border: 1px solid transparent;
            transition: background-color 0.2s, color 0.2s;
        }
        .calendar-day:not(.disabled):hover {
            background-color: var(--tg-secondary-bg);
        }
        .calendar-day.selected {
            background-color: var(--tg-button);
            color: var(--tg-button-text);
            border-color: var(--tg-button);
        }
        .calendar-day.in-range {
            background-color: var(--tg-secondary-bg);
            color: var(--tg-text);
            border-radius: 0;
        }
        .calendar-day.start-range {
            background-color: var(--tg-button);
            color: var(--tg-button-text);
            border-top-left-radius: 50%;
            border-bottom-left-radius: 50%;
        }
        .calendar-day.end-range {
            background-color: var(--tg-button);
            color: var(--tg-button-text);
            border-top-right-radius: 50%;
            border-bottom-right-radius: 50%;
        }
        .calendar-day.disabled {
            color: var(--tg-hint);
            cursor: not-allowed;
            text-decoration: line-through;
            opacity: 0.6;
        }
        .calendar-day.padding {
            visibility: hidden;
        }
        .info-panel {
            text-align: center;
            padding: 12px;
            margin-top: 15px;
            border-radius: 8px;
            font-size: 14px;
            background-color: var(--tg-secondary-bg);
        }
        #confirm-button {
            font-family: inherit;
            font-weight: 600;
            font-size: 16px;
            width: 100%;
            padding: 15px;
            margin-top: auto; /* Прижимает кнопку к низу */
            border: none;
            border-radius: 8px;
            cursor: pointer;
            background-color: var(--tg-button);
            color: var(--tg-button-text);
        }
        #confirm-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body>

    <div class="calendar-wrapper">
        <div class="calendar-header">
            <button id="prev-month-btn">&lsaquo;</button>
            <span id="month-year-label"></span>
            <button id="next-month-btn">&rsaquo;</button>
        </div>
        <div class="calendar-grid" id="weekdays-grid"></div>
        <div class="calendar-grid" id="calendar-grid"></div>
    </div>
    <div class="info-panel" id="info-panel">Загрузка...</div>
    <button id="confirm-button" disabled>Подтвердить</button>

    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();

            const monthYearLabel = document.getElementById('month-year-label');
            const calendarGrid = document.getElementById('calendar-grid');
            const weekdaysGrid = document.getElementById('weekdays-grid');
            const infoPanel = document.getElementById('info-panel');
            const confirmButton = document.getElementById('confirm-button');
            const prevMonthBtn = document.getElementById('prev-month-btn');
            const nextMonthBtn = document.getElementById('next-month-btn');

            let currentMonth = new Date().getMonth();
            let currentYear = new Date().getFullYear();
            let disabledDates = [];
            let checkinDate = null;
            let checkoutDate = null;

            const monthNames = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];
            const dayNames = ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"];

            function renderWeekdays() {
                weekdaysGrid.innerHTML = '';
                dayNames.forEach(day => {
                    const dayEl = document.createElement('div');
                    dayEl.className = 'calendar-weekday';
                    dayEl.textContent = day;
                    weekdaysGrid.appendChild(dayEl);
                });
            }
            
            function renderCalendar() {
                calendarGrid.innerHTML = '';
                monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;
                
                const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
                const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const startingDay = (firstDayOfMonth === 0) ? 6 : firstDayOfMonth - 1;

                for (let i = 0; i < startingDay; i++) {
                    const paddingDay = document.createElement('div');
                    paddingDay.className = 'calendar-day padding';
                    calendarGrid.appendChild(paddingDay);
                }

                for (let day = 1; day <= daysInMonth; day++) {
                    const dayEl = document.createElement('div');
                    dayEl.className = 'calendar-day';
                    dayEl.textContent = day;

                    const currentDate = new Date(currentYear, currentMonth, day);
                    const currentDateStr = currentDate.toISOString().split('T')[0];

                    if (currentDate < today || disabledDates.includes(currentDateStr)) {
                        dayEl.classList.add('disabled');
                    } else {
                        dayEl.dataset.date = currentDateStr;
                        dayEl.addEventListener('click', onDayClick);
                    }
                    
                    if (checkinDate && checkoutDate) {
                        const checkin = new Date(checkinDate);
                        const checkout = new Date(checkoutDate);
                        if (currentDate >= checkin && currentDate <= checkout) {
                            dayEl.classList.add('in-range');
                            if (currentDate.getTime() === checkin.getTime()) dayEl.classList.add('start-range');
                            if (currentDate.getTime() === checkout.getTime()) dayEl.classList.add('end-range');
                        }
                    } else if (checkinDate && currentDateStr === checkinDate) {
                        dayEl.classList.add('selected');
                    }
                    
                    calendarGrid.appendChild(dayEl);
                }
            }
            
            function onDayClick(event) {
                const selectedDateStr = event.target.dataset.date;
                
                if (!checkinDate || (checkinDate && checkoutDate)) {
                    checkinDate = selectedDateStr;
                    checkoutDate = null;
                } else {
                    const selectedD = new Date(selectedDateStr);
                    const checkinD = new Date(checkinDate);
                    
                    // Проверяем, есть ли заблокированные даты между выбранными
                    let isRangeClear = true;
                    const start = selectedD > checkinD ? checkinD : selectedD;
                    const end = selectedD > checkinD ? selectedD : checkinD;
                    
                    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
                        if (disabledDates.includes(d.toISOString().split('T')[0])) {
                            isRangeClear = false;
                            break;
                        }
                    }

                    if (!isRangeClear) {
                        // Если диапазон содержит заблокированные даты, сбрасываем выбор
                        checkinDate = selectedDateStr;
                        checkoutDate = null;
                        tg.HapticFeedback.notificationOccurred('error');
                    } else {
                        if (selectedD > checkinD) {
                            checkoutDate = selectedDateStr;
                        } else {
                            checkoutDate = checkinDate;
                            checkinDate = selectedDateStr;
                        }
                    }
                }
                updateUI();
            }

            function updateUI() {
                renderCalendar();
                if (!checkinDate) {
                    infoPanel.textContent = 'Выберите дату заезда';
                    confirmButton.disabled = true;
                } else if (!checkoutDate) {
                    infoPanel.textContent = `Заезд: ${formatDate(checkinDate)}. Выберите дату выезда.`;
                    confirmButton.disabled = true;
                } else {
                    const nights = (new Date(checkoutDate) - new Date(checkinDate)) / (1000 * 60 * 60 * 24);
                    infoPanel.textContent = `Заезд: ${formatDate(checkinDate)}, Выезд: ${formatDate(checkoutDate)} (${nights} ночей)`;
                    confirmButton.disabled = false;
                }
            }

            function formatDate(dateStr) {
                const [year, month, day] = dateStr.split('-');
                return `${day}.${month}`;
            }

            prevMonthBtn.addEventListener('click', () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                renderCalendar();
            });

            nextMonthBtn.addEventListener('click', () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                renderCalendar();
            });

            confirmButton.addEventListener('click', () => {
                if (checkinDate && checkoutDate) {
                    const dataToSend = {
                        property_id: propertyId,
                        checkin_date: checkinDate,
                        checkout_date: checkoutDate
                    };
                    tg.sendData(JSON.stringify(dataToSend));
                    tg.close();
                }
            });

            function main() {
                const urlParams = new URLSearchParams(window.location.search);
                const propertyId = urlParams.get('property_id');
                
                if (!propertyId) {
                    infoPanel.textContent = "Ошибка: не найден ID объекта.";
                    return;
                }
                
                renderWeekdays();
                infoPanel.textContent = "Загрузка доступных дат...";
                
                // ВАЖНО: Убедитесь, что здесь ваш актуальный ngrok URL
                const API_BASE_URL = "https://5542-162-19-62-155.ngrok-free.app";
                const fetchUrl = `${API_BASE_URL}/api/unavailable_dates/${propertyId}`;

                fetch(fetchUrl, { headers: { 'ngrok-skip-browser-warning': 'true' } })
                    .then(response => {
                        if (!response.ok) throw new Error('Ошибка сети');
                        return response.json();
                    })
                    .then(data => {
                        disabledDates = data;
                        updateUI();
                    })
                    .catch(error => {
                        console.error('Fetch Error:', error);
                        infoPanel.textContent = "Ошибка загрузки данных. Проверьте ngrok-туннель.";
                    });
            }

            main();
        });
    </script>
</body>
</html>
